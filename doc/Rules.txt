// $Revision: 5236 $ 
// $Date: 2010-11-11 00:13:06 +0300 (Чт, 11 ноя 2010) $ 
// $Author: InfinitySky7 $

=====================================
Соглашения разработчиков FlylinkDC++.
=====================================

1. Правила именования.

	1.1. Имена переменных должны начинаться с маленькой буквы.
 
	1.2. Переменные, за исключением локальных, должны сопровождаться префиксами:
 
		1.2.1 префиксом "p" обозначаются параметры функций , передаваемые в функцию по ссылке, или указателю, и которые изменяются в теле функции, или же передаются насквозь, и используются в качестве возвращаемого значения.
			Все остальные параметры функций, в т.ч. константные ссылки, и константые указатели считаются локальными переменными, и в префиксе не нуждаются.
			Примеры:
			inline const tstring& toT(const string& str, tstring& p_tmp) noexcept
			{
				return utf8ToWide(str, p_tmp);
			}
			inline tstring toT(const string& str) noexcept
			{
				return utf8ToWide(str);
			}
			inline string wideToUtf8(const wstring& str) noexcept
			{
				string tmp;
				return wideToUtf8(str, tmp);
			}
			const wstring& utf8ToWide(const string& str, wstring& p_tgt) noexcept
			{
			  // ...
				return p_tgt;
			}
       
		1.2.2 префиксом "m" обозначаются члены класса , за исключением статических, доп. см. 1.2.3.
			Исключеним являются лишь простые структуры обвёртки, в которых не обязательно проставлять префикс "m" для улучшения восприятия кода при обращении к полям такой структуры. Пример:
			struct MessageTask : public Task
			{
				const ChatMessage message;
			};
         
			Однако уже в чуть более сложных классах, всегда необходимо использовать префикс "m", но при этом так же необходимо обязательно декларировать джеттер и сеттер, если необходим доступ к членам класса извне.
			Для сокращения объёмов кода данные методы можно генерировать автоматически с помощью макросов:
			    GETSET - генерирует приватный мембер, константный джеттер, и сеттер;
			    GETM - генерирует приватный мембер, и константный джеттер;
			    GETC - генерирует приватный константный мембер, и константный джеттер.
			Пример:
			struct MessageTask : public Task
			{
				explicit MessageTask(const ChatMessage& message) : m_message(message)
				{
				}
				GETC(ChatMessage, m_message, Message);
			};
       
		1.2.3 префикс "g" - глобальные или статические переменные модулей, функций, и классов.
			Пример:
			struct UserInfoBaseHandlerTraitsUser
			{
					static UserPtr g_user;
			};

	1.3. Имена функций, в т.ч. методов классов должны начинаться с маленькой буквы. Пример:
			const tstring& getText(const int col) const
 
	1.4. Имена классов и пространств имён должны начинаться с заглавной буквы, и не должны содежржать дополнительных разделителей. Примеры: Util, Text, QueueItem, ColumnBase.
 
	1.5. Имена макросов, и констант времени компиляции (enum, параметры шаблонов, и т.п.) должны быть записаны в верхнем регистре, а слова должны быть разделены подчёркиванием. Примеры: SET_SETTING, SETTING, PLAY_SOUND.
 
2. Использование модификаторов, запрет наследования, и запрет копирования.
	В данном разделе повторены некоторые основы С++, это сделано умышленно, ибо разработчики, для которых С++ не является постоянно используемым языком часто забывают о них:

	2.1. Необходимо обязательно использовать модификатор virtual для любых методов базового класса (обязательно включая деструктор), которые могут быть переопредлены в наследнике. Пример:
		class Task
		{
			public:
				virtual ~Task() { } // виртутальный деструктор у базового класса.
		};

		class StringTask : public Task
		{
			public:
				StringTask(const string& str) : m_str(str) { }
				const string m_str;
		};
 
	2.2. Необходимо обязательно использовать модификатор const для любых неизменяемых данных. Примеры:
		2.2.1 Объявление параметра функции, который не изменяется в её теле (фактически это объявление локальной константы):
		const tstring& getText(const int col) const
		{
		  	return m_info[col];
		}
		2.2.2 Объявление константного метода класса, который не изменяет состояние объекта класса:
		tstring getText() const
		{
		  	// ...
		}
		2.2.2 Объявление константного члена класса:
		struct MessageTask
		{
			const ChatMessage m_message;
		};
		2.2.2 Передача функции параметра по константной ссылке:
		inline const tstring& toT(const string& str, tstring& p_tmp) noexcept
		{
		 	return utf8ToWide(str, p_tmp);
		}

	2.3. Необходимо всегда использовать новый модификатор noexcept вместо устаревшего throw(). Пример:
		void Attach(_In_opt_ HWND hWndNew) noexcept
		{
		  // ...
		}
      
	2.4. Пример объявления класса, для которого запрещено наследование:
		class StringTask
		#ifdef _DEBUG
			: virtual NonDerivable<StringTask>
		#endif
		{
		  // ...
		};
      
		Пример объявления класса, для которого запрещено копирование:
		class ColumnBase
		#ifdef _DEBUG
			: private boost::noncopyable
		#endif
		{
		  // ...
		}
      
		Пример объявления класса, для которого запрещено копирование и наследование:
		class CriticalSection
		#ifdef _DEBUG
			: boost::noncopyable, virtual NonDerivable<CriticalSection>
		#endif
		{
		  // ...
		}

3. Оформление кода.

	3.1. Необходимо помечать комментарием изменяемые строки, блоки, и функции в основном коде DC++. Желательно так же писать свой ник и причину изменения.
		Примеры:
		
		  // [X] Nick.
		  // Description of change.
			
		или, если описание небольшое:
		
		  // [X] Nick. Description of change.
			
		, где [X] - маркер изменения:
		
		  	[+] - добавлено;
		  	[-] - удалено (закомментированно);
		  	[~] - изменено значение по умолчанию, или косметика кода;
		  	[!] - критическое изменение или комментарий для места в коде, на которое необходимо обратить внимание;
		  	[?] - комментарий с вопросом для команды разработчиков;
		  	[<-] - перенесено из другого места, тут же необходимо указывать расположение исходного кода.
		  	'Nick' - псевдоним разработчика, внесшего изменение.
           
		При добавлении или изменении большого блока кода необходимо так же отмечать конец изменений. Пример:
   
   		  // [!] Nick. Description of change.
           
           изменения
        
   		  // [~] Nick. Description of change.
           
		Исключением для данного правила являются включения заголовочных файлов, эти случаи изменений в основном коде необходимо комментировать только при наличии веской причины для этого (возможные ошибки сборки в некоторых конфигурациях, и т.п.).
				
	3.2. Желательно группировать весь функционал, привнесенный Флаем в одном блоке внутри файла модуля, т.е. чтобы не перемежались оригинальные функции с добавленными.
		В хидерах данное правило рекомендуется игнорировать, и в первую очередь необходимо сохранять целостность интерфейса модуля или класса.
      
	3.3. Желательно не изменять названия оригинальных файлов/классов/членов/функций (включая префиксы) для упрощения слияний, и сравнения изменений с оригинальными проектами.
  
	3.4. Желательно сразу оформлять код, следуя правилам, по которым настроен AStyle для проекта.

	Пример кода класса, корректно оформленного в соответствии с пунктами 1 - 3:
	template<int C> class ColumnBase
	#ifdef _DEBUG
	 : private boost::noncopyable // [+] IRainman fix.
	#endif
	{
	 public:
	 	virtual ~ColumnBase() {}
	 	const tstring& getText(const int col) const
	 	{
	 		dcassert(col >= 0 && col < C);
	 		return m_info[col];
	 	}
	 	void setText(const int col, const tstring& val)
	 	{
	 		dcassert(col >= 0 && col < C);
	 		m_info[col] = val;
	 	}
	 private:
	 	tstring m_info[C]; //[+] PPA
	};
 
4. Публикации в блоге http://flylinkdc.blogspot.com.