#include "stdinc.h"
#include "FileTypes.h"

/* ANSI-C code produced by gperf version 3.0.4 */
/* Command-line: gperf -C -I -L ANSI-C -G -m 64 filetypes-filtered.txt  */
/* Computed positions: -k'1-4' */

static const unsigned fileTypeFlags[] =
{
	0, 0, 0, 0, 0,
	0, 0, 0, 0, 1<<FILE_TYPE_DOCUMENT | 1<<FILE_TYPE_EBOOK,
	0, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_VIDEO,
	1<<FILE_TYPE_EXECUTABLE, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_IMAGE, 0, 1<<FILE_TYPE_VIDEO,
	0, 0, 1<<FILE_TYPE_AUDIO, 0, 1<<FILE_TYPE_AUDIO,
	1<<FILE_TYPE_COMICS, 1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_DOCUMENT | 1<<FILE_TYPE_EBOOK, 1<<FILE_TYPE_COMICS,
	1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_COMICS, 1<<FILE_TYPE_EXECUTABLE, 1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_COMICS,
	1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_AUDIO, 0, 1<<FILE_TYPE_EXECUTABLE,
	1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_CD_DVD, 1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_EBOOK,
	0, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_CD_DVD, 0, 1<<FILE_TYPE_COMICS,
	1<<FILE_TYPE_CD_DVD, 0, 0, 1<<FILE_TYPE_EXECUTABLE, 1<<FILE_TYPE_IMAGE,
	1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_IMAGE,
	1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_AUDIO, 0, 1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_VIDEO,
	1<<FILE_TYPE_IMAGE, 0, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_AUDIO, 0,
	1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_COMPRESSED, 0, 1<<FILE_TYPE_IMAGE,
	1<<FILE_TYPE_AUDIO, 0, 1<<FILE_TYPE_AUDIO, 0, 1<<FILE_TYPE_VIDEO,
	1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_VIDEO,
	1<<FILE_TYPE_COMICS, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_IMAGE,
	1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_IMAGE,
	1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_IMAGE, 0, 1<<FILE_TYPE_EXECUTABLE,
	1<<FILE_TYPE_VIDEO, 0, 1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_IMAGE,
	0, 1<<FILE_TYPE_CD_DVD, 1<<FILE_TYPE_EXECUTABLE, 1<<FILE_TYPE_CD_DVD, 0,
	1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_DOCUMENT,
	1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_EBOOK, 1<<FILE_TYPE_CD_DVD, 0,
	1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_AUDIO, 0, 1<<FILE_TYPE_EXECUTABLE,
	1<<FILE_TYPE_AUDIO, 0, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_COMICS,
	1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_VIDEO,
	1<<FILE_TYPE_CD_DVD, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_VIDEO,
	1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_AUDIO,
	1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_VIDEO,
	0, 1<<FILE_TYPE_VIDEO, 0, 1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_DOCUMENT,
	1<<FILE_TYPE_CD_DVD, 1<<FILE_TYPE_DOCUMENT, 0, 1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_VIDEO,
	1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_CD_DVD, 1<<FILE_TYPE_COMPRESSED,
	1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_IMAGE, 0, 1<<FILE_TYPE_AUDIO, 0,
	1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_AUDIO, 0, 0, 1<<FILE_TYPE_VIDEO,
	0, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_IMAGE, 0, 1<<FILE_TYPE_IMAGE,
	1<<FILE_TYPE_VIDEO, 0, 1<<FILE_TYPE_VIDEO, 0, 1<<FILE_TYPE_CD_DVD,
	0, 0, 1<<FILE_TYPE_CD_DVD, 1<<FILE_TYPE_AUDIO, 1<<FILE_TYPE_AUDIO,
	1<<FILE_TYPE_AUDIO, 0, 0, 0, 1<<FILE_TYPE_CD_DVD,
	1<<FILE_TYPE_CD_DVD, 1<<FILE_TYPE_COMPRESSED, 0, 0, 0,
	0, 1<<FILE_TYPE_EBOOK, 0, 1<<FILE_TYPE_EXECUTABLE, 1<<FILE_TYPE_CD_DVD,
	0, 0, 1<<FILE_TYPE_IMAGE, 0, 1<<FILE_TYPE_EBOOK,
	1<<FILE_TYPE_VIDEO, 0, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_EXECUTABLE, 1<<FILE_TYPE_VIDEO,
	0, 0, 1<<FILE_TYPE_IMAGE, 0, 0,
	1<<FILE_TYPE_AUDIO, 0, 0, 0, 1<<FILE_TYPE_AUDIO,
	0, 0, 1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_VIDEO, 0,
	0, 0, 0, 1<<FILE_TYPE_AUDIO, 0,
	0, 0, 0, 0, 0,
	0, 0, 0, 0, 1<<FILE_TYPE_AUDIO,
	0, 0, 0, 0, 0,
	0, 0, 1<<FILE_TYPE_EXECUTABLE, 1<<FILE_TYPE_VIDEO, 0,
	0, 0, 0, 1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_VIDEO,
	0, 0, 0, 0, 0,
	1<<FILE_TYPE_VIDEO, 0, 0, 0, 0,
	0, 0, 0, 0, 0,
	1<<FILE_TYPE_DOCUMENT, 1<<FILE_TYPE_COMPRESSED, 0, 0, 1<<FILE_TYPE_COMPRESSED,
	1<<FILE_TYPE_AUDIO, 0, 0, 1<<FILE_TYPE_IMAGE, 0,
	0, 0, 1<<FILE_TYPE_VIDEO, 0, 0,
	0, 0, 0, 1<<FILE_TYPE_VIDEO, 1<<FILE_TYPE_DOCUMENT,
	0, 1<<FILE_TYPE_COMPRESSED, 1<<FILE_TYPE_DOCUMENT, 0, 1<<FILE_TYPE_AUDIO,
	0, 0, 0, 0, 0,
	0, 0, 1<<FILE_TYPE_VIDEO, 0, 0,
	1<<FILE_TYPE_VIDEO, 0, 1<<FILE_TYPE_VIDEO, 0, 0,
	0, 1<<FILE_TYPE_VIDEO, 0, 0, 0,
	0, 0, 0, 0, 0,
	0, 0, 0, 1<<FILE_TYPE_IMAGE, 1<<FILE_TYPE_DOCUMENT,
	0, 0, 1<<FILE_TYPE_IMAGE, 0, 0,
	0, 0, 0, 0, 1<<FILE_TYPE_AUDIO
};

#define TOTAL_KEYWORDS 189
#define MIN_WORD_LENGTH 1
#define MAX_WORD_LENGTH 4
#define MIN_HASH_VALUE 9
#define MAX_HASH_VALUE 339

static inline int asciiToLower(int c)
{
	if (c >= 'A' && c <= 'Z') return c - 'A' + 'a';
	return c;
}

static unsigned int hash(const char *str, unsigned int len)
{
	static const unsigned short asso_values[] =
	{
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340,   3,
		 13,  60,  29, 151,   3, 138, 340, 340,   6, 340,
		  1, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340,  35,  55,  10,
		  2,  12,  37, 169, 102,  12,  33,   7, 179,  15,
		 70, 106,   1,  20,  87,  49,   6,   8,  20,  11,
		118,  96,  62,  87, 340,  26, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
		340, 340, 340, 340, 340, 340, 340, 340, 340
	};

	int hval = len;
	switch (hval)
	{
		default:
			hval += asso_values[(unsigned char) asciiToLower(str[3])];
			/*FALLTHROUGH*/
		case 3:
			hval += asso_values[(unsigned char) asciiToLower(str[2])+3];
			/*FALLTHROUGH*/
		case 2:
			hval += asso_values[(unsigned char) asciiToLower(str[1])+1];
			/*FALLTHROUGH*/
		case 1:
			hval += asso_values[(unsigned char) asciiToLower(str[0])];
			break;
	}
	return hval;
}

static const char *const wordList[] =
{
	"", "", "", "", "", "", "", "", "",
	"ps",
	"",
	"psm",
	"dsm",
	"ptm",
	"ts",
	"com",
	"dbm",
	"pct",
	"",
	"tta",
	"", "",
	"it",
	"",
	"wv",
	"cba",
	"chm",
	"mtm",
	"pdf",
	"cb7",
	"qt",
	"cbr",
	"wsf",
	"cdr",
	"cbt",
	"ppt",
	"vob",
	"ult",
	"",
	"ps1",
	"mpa",
	"mp3",
	"mdf",
	"doc",
	"mobi",
	"",
	"mts",
	"isz",
	"",
	"cbz",
	"mds",
	"", "",
	"vbs",
	"tif",
	"eps",
	"asf",
	"au",
	"mps",
	"psp",
	"ssa",
	"stm",
	"",
	"z",
	"ass",
	"webp",
	"",
	"mp1",
	"flac",
	"",
	"ai",
	"mpg",
	"tar",
	"",
	"pic",
	"mpc",
	"",
	"wow",
	"",
	"webm",
	"cab",
	"pict",
	"s3m",
	"aif",
	"sub",
	"cbw",
	"wma",
	"mpp",
	"mp1v",
	"jpg",
	"nst",
	"sea",
	"tiff",
	"pcx",
	"dcx",
	"tz",
	"wmf",
	"emf",
	"",
	"jar",
	"rv",
	"",
	"arj",
	"far",
	"ico",
	"",
	"cso",
	"app",
	"iso",
	"",
	"rtf",
	"bpg",
	"srt",
	"tga",
	"htm",
	"mov",
	"txt",
	"djvu",
	"img",
	"",
	"amf",
	"aiff",
	"vqf",
	"",
	"bat",
	"mol",
	"",
	"m1v",
	"ams",
	"cbl",
	"aac",
	"asx",
	"odt",
	"odf",
	"mpv",
	"cue",
	"mdl",
	"tgz",
	"mpv1",
	"m2ts",
	"mpe",
	"ods",
	"ace",
	"png",
	"ra",
	"669",
	"ram",
	"zip",
	"mpv2",
	"pxp",
	"",
	"flv",
	"",
	"rar",
	"pptx",
	"nrg",
	"xls",
	"",
	"jpe",
	"rm",
	"ape",
	"xps",
	"docx",
	"vc4",
	"uc2",
	"wav",
	"xif",
	"",
	"umx",
	"",
	"odp",
	"m4a",
	"", "",
	"m2v",
	"",
	"mp4",
	"bmp",
	"",
	"psd",
	"wmv",
	"",
	"swf",
	"",
	"ccd",
	"", "",
	"bwt",
	"mod",
	"mp2",
	"xm",
	"", "", "",
	"vcd",
	"pdi",
	"lha",
	"", "", "", "",
	"fb2",
	"",
	"msi",
	"cdi",
	"", "",
	"rle",
	"",
	"epub",
	"mp2v",
	"",
	"ogm",
	"exe",
	"3gp",
	"", "",
	"gif",
	"", "",
	"mid",
	"", "", "",
	"med",
	"", "",
	"7z",
	"avi",
	"", "", "", "",
	"midi",
	"", "", "", "", "", "", "", "", "",
	"",
	"ogg",
	"", "", "", "", "", "", "",
	"cmd",
	"divx",
	"", "", "", "",
	"gz",
	"vivo",
	"", "", "", "", "",
	"m4v",
	"", "", "", "", "", "", "", "", "",
	"xlsx",
	"lzh",
	"", "",
	"hqx",
	"lqt",
	"", "",
	"sfw",
	"", "", "",
	"f4v",
	"", "", "", "", "",
	"mkv",
	"html",
	"",
	"bz2",
	"xml",
	"",
	"okt",
	"", "", "", "", "", "", "",
	"ogv",
	"", "",
	"mpeg",
	"",
	"rmvb",
	"", "", "",
	"3g2",
	"", "", "", "", "", "", "", "", "",
	"", "",
	"jpeg",
	"nfo",
	"", "",
	"heic",
	"", "", "", "", "", "",
	"rmi"
};

unsigned int getFileTypesFromExt(const char *str, unsigned int len)
{
	if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
	{
		int key = hash(str, len);
		if (key <= MAX_HASH_VALUE && key >= 0)
		{
			const char *s = wordList[key];
			for (int i=0;; i++)
			{
				if (s[i] != asciiToLower(str[i])) return 0;
				if (!s[i]) break;
			}
			return fileTypeFlags[key];
		}
	}
	return 0;
}

unsigned int getFileTypesFromFileName(const string& name)
{
	string::size_type pos = name.rfind('.');
	if (pos == string::npos) return 0;
	return getFileTypesFromExt(name.c_str() + pos + 1, name.length() - (pos + 1));
}
