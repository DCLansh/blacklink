#ifndef HTTP_HEADERS_H_
#define HTTP_HEADERS_H_

#include <string>

namespace Http
{

enum HttpHeader
{
	HEADER_AGE = 3,
	HEADER_DATE = 5,
	HEADER_COOKIE = 6,
	HEADER_ALLOW = 10,
	HEADER_CONNECTION = 11,
	HEADER_CONTENT_TYPE = 12,
	HEADER_CONTENT_RANGE = 13,
	HEADER_AUTHORIZATION = 14,
	HEADER_ACCEPT_LANGUAGE = 15,
	HEADER_CONTENT_LANGUAGE = 16,
	HEADER_CONTENT_LOCATION = 17,
	HEADER_RANGE = 18,
	HEADER_ETAG = 19,
	HEADER_CONTENT_DISPOSITION = 20,
	HEADER_WWW_AUTHENTICATE = 21,
	HEADER_TE = 22,
	HEADER_ACCEPT = 26,
	HEADER_WARNING = 27,
	HEADER_CONTENT_LENGTH = 28,
	HEADER_EXPIRES = 29,
	HEADER_ACCEPT_ENCODING = 30,
	HEADER_CONTENT_ENCODING = 31,
	HEADER_SET_COOKIE = 32,
	HEADER_REFERER = 33,
	HEADER_ACCEPT_CHARSET = 34,
	HEADER_ACCEPT_RANGES = 35,
	HEADER_PRAGMA = 36,
	HEADER_RETRY_AFTER = 37,
	HEADER_HOST = 38,
	HEADER_LOCATION = 39,
	HEADER_TRAILER = 40,
	HEADER_SERVER = 41,
	HEADER_IF_RANGE = 42,
	HEADER_CACHE_CONTROL = 43,
	HEADER_LAST_MODIFIED = 44,
	HEADER_USER_AGENT = 45,
	HEADER_LINK = 46,
	HEADER_PROXY_CONNECTION = 47,
	HEADER_PROXY_AUTHENTICATE = 48,
	HEADER_PROXY_AUTHORIZATION = 50,
	HEADER_IF_MODIFIED_SINCE = 51,
	HEADER_TRANSFER_ENCODING = 52,
	HEADER_IF_UNMODIFIED_SINCE = 53,
	HEADER_IF_MATCH = 56,
	HEADER_IF_NONE_MATCH = 61
};

int getHeaderId(const char* s, unsigned len) noexcept;
int getHeaderId(const std::string& s) noexcept;
const char* getHeader(int id) noexcept;

}

#endif // HTTP_HEADERS_H_
